{"version":3,"file":"DNSlookup-S0MaH3SQ.js","sources":["../../../../pages/DNSlookup.vue"],"sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <div class=\"margins\">\n      <h2 class=\"sub-heading\">DNS Lookup Tool</h2>\n\n      <form @submit.prevent=\"fetchDNSRecords\">\n        <div class=\"mb-4\">\n          <div class=\"flex justify-end mt-4\">\n            <router-link to=\"/\" class=\"home-button\">\n              <button class=\"action-button\">Home</button>\n            </router-link>\n          </div>\n          <label class=\"block mb-1 gradient__text\">Domain:</label>\n          <input\n            type=\"text\"\n            v-model=\"domain\"\n            class=\"input-field\"\n            placeholder=\"enter a domain\"\n            required\n          />\n        </div>\n        <button type=\"submit\" class=\"action-button gradient__button\">Lookup DNS Records</button>\n      </form>\n\n      \n      <div class=\"record-types mt-4\">\n        <h3 class=\"sub-heading\">Record Types</h3>\n        <ul class=\"record-list\">\n          <li><span class=\"gradient__text\">A:</span> Maps a domain to an IPv4 address.</li>\n          <li><span class=\"gradient__text\">AAAA:</span> Maps a domain to an IPv6 address.</li>\n          <li><span class=\"gradient__text\">CNAME:</span> Canonical name record that aliases one domain to another.</li>\n          <li><span class=\"gradient__text\">MX:</span> Mail exchange record that specifies the mail server for the domain.</li>\n          <li><span class=\"gradient__text\">NS:</span> Name server record that indicates which server is authoritative for the domain.</li>\n          <li><span class=\"gradient__text\">TXT:</span> Text record that can hold arbitrary text data for various uses, such as verification.</li>\n          <li><span class=\"gradient__text\">SOA:</span> Start of authority record that provides information about the domain's DNS zone.</li>\n          <li><span class=\"gradient__text\">SRV:</span> Service record that specifies the location of servers for specified services.</li>\n          <li><span class=\"gradient__text\">PTR:</span> Pointer record used for reverse DNS lookups, mapping an IP address to a domain name.</li>\n          <li><span class=\"gradient__text\">SPF:</span> Sender Policy Framework record that defines which mail servers are permitted to send email on behalf of the domain.</li>\n          <li><span class=\"gradient__text\">DKIM:</span> DomainKeys Identified Mail record that provides a method for validating the authenticity of email messages.</li>\n          <li><span class=\"gradient__text\">DMARC:</span> Domain-based Message Authentication, Reporting, and Conformance record that helps protect against email spoofing.</li>\n        </ul>\n      </div>\n\n      <div v-if=\"dnsRecords.length\" class=\"mt-6\">\n        <h3 class=\"sub-heading\">DNS Records for {{ domain }}</h3>\n        <table class=\"mac-table\">\n          <thead>\n            <tr>\n              <th>Type</th>\n              <th>Record</th>\n              <th>TTL</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(record, index) in dnsRecords\" :key=\"index\">\n              <td>{{ record.type }}</td>\n              <td>{{ record.value }}</td>\n              <td>{{ record.ttl }}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <div v-if=\"errorMessage\" class=\"error-message mt-4\">\n        {{ errorMessage }}\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst domain = ref('');\nconst dnsRecords = ref([]);\nconst errorMessage = ref('');\n\nconst fetchDNSRecords = async () => {\n  dnsRecords.value = [];\n  errorMessage.value = '';\n\n  try {\n    const response = await $fetch('/api/dnsLookup', {\n      method: 'POST',\n      body: {\n        url: domain.value,\n      },\n    });\n\n    if (!response || !response.data) {\n      throw new Error('No DNS records found for this domain');\n    }\n\n    // Populate dnsRecords with response data\n    if (response.data.A) {\n      response.data.A.forEach(record => {\n        dnsRecords.value.push({\n          type: 'A',\n          value: record.address,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n    if (response.data.AAAA) {\n      response.data.AAAA.forEach(record => {\n        dnsRecords.value.push({\n          type: 'AAAA',\n          value: record.address,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n    if (response.data.CNAME) {\n      response.data.CNAME.forEach(record => {\n        dnsRecords.value.push({\n          type: 'CNAME',\n          value: record.cname,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n    if (response.data.MX) {\n      response.data.MX.forEach(record => {\n        dnsRecords.value.push({\n          type: 'MX',\n          value: record.exchange,\n          ttl: record.priority, // Assuming priority as TTL for display\n        });\n      });\n    }\n\n    if (response.data.NS) {\n      response.data.NS.forEach(record => {\n        dnsRecords.value.push({\n          type: 'NS',\n          value: record.ns,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n    if (response.data.TXT) {\n      response.data.TXT.forEach(record => {\n        dnsRecords.value.push({\n          type: 'TXT',\n          value: record.text,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n    if (response.data.SOA) {\n      dnsRecords.value.push({\n        type: 'SOA',\n        value: `${response.data.SOA.mname} ${response.data.SOA.rname}`,\n        ttl: response.data.SOA.ttl,\n      });\n    }\n\n    if (response.data.SRV) {\n      response.data.SRV.forEach(record => {\n        dnsRecords.value.push({\n          type: 'SRV',\n          value: `${record.priority} ${record.weight} ${record.port} ${record.target}`,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n    if (response.data.PTR) {\n      response.data.PTR.forEach(record => {\n        dnsRecords.value.push({\n          type: 'PTR',\n          value: record.ptrdname,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n    if (response.data.SPF) {\n      response.data.SPF.forEach(record => {\n        dnsRecords.value.push({\n          type: 'SPF',\n          value: record.text,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n    if (response.data.DKIM) {\n      response.data.DKIM.forEach(record => {\n        dnsRecords.value.push({\n          type: 'DKIM',\n          value: record.text,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n    if (response.data.DMARC) {\n      response.data.DMARC.forEach(record => {\n        dnsRecords.value.push({\n          type: 'DMARC',\n          value: record.text,\n          ttl: record.ttl,\n        });\n      });\n    }\n\n  } catch (error) {\n    errorMessage.value = error.message || 'An error occurred while fetching DNS records.';\n  }\n};\n\n</script>\n\n<style scoped>\n.wrapper {\n  padding: 2rem;\n  background-color: #0c0a09;\n  color: #ada9a9;\n}\n.margins {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.sub-heading {\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin-top: 1rem;\n}\n.record-types {\n  background-color: #1f2937; /* Slightly darker background for visibility */\n  padding: 1rem;\n  border-radius: 0.5rem;\n}\n.record-list {\n  list-style-type: none; /* Remove default list styling */\n  padding-left: 0; /* Remove default padding */\n}\n.input-field {\n  @apply border border-gray-300 rounded p-2 w-full;\n  color: #000;\n  background-color: #f3f0f0;\n}\n.action-button {\n  background-color: #12a87b;\n  color: white;\n  padding: 0.75rem 1.5rem;\n  border-radius: 0.5rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  transition: background-color 0.3s ease;\n}\n\n.action-button:hover {\n  background-color: #0fcf97;\n}\n.mac-table {\n  width: 100%;\n  border-collapse: collapse;\n}\nth,\ntd {\n  padding: 0.75rem;\n  border-bottom: 1px solid #ddd;\n}\n.error-message {\n  color: red;\n  margin-top: 1rem;\n}\n.gradient__text {\n    background: linear-gradient(90deg, #7bceb6 10%, #12a87b 40%, #0fcf97 60%, #7bceb6 90%);\n    background-clip: text;\n    -webkit-background-clip: text;\n    background-size: 200% auto;\n    color: #000;\n    -webkit-text-fill-color: transparent;\n    animation:shine 1s linear infinite\n}\n</style>\n\n\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAyEM,UAAA,SAAS,IAAI,EAAE;AACf,UAAA,aAAa,IAAI,CAAA,CAAE;AACnB,UAAA,eAAe,IAAI,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}