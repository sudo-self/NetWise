{"file":"Ping-HvHaB_uv.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;AA2EA,UAAM,UAAU,IAAI,EAAE;AACtB,UAAM,UAAU,IAAI,KAAK;AACzB,UAAM,aAAa,IAAI,IAAI;AAC3B,UAAM,QAAQ,IAAI,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":[],"sources":["../../../../pages/Ping.vue"],"sourcesContent":["<template>\n  <div class=\"wrapper\">\n    <div class=\"margins\">\n      <h2 class=\"sub-heading\">PING Toolkit</h2>\n      <div class=\"flex justify-end mt-4\">\n        <router-link to=\"/\" class=\"home-button\">\n          <button class=\"action-button\">Home</button>\n        </router-link>\n      </div>\n      <h4 class=\"description\">Check the reachability of a host by sending ping requests.</h4>\n\n      <div class=\"input-group\">\n        <input \n          type=\"text\" \n          v-model=\"pingUrl\" \n          placeholder=\"Enter URL to ping https://\" \n          class=\"input-field\"\n        />\n        <button @click=\"sendPing\" class=\"action-button\">Ping</button>\n      </div>\n\n      <div v-if=\"loading\" class=\"loading\">Pinging...</div>\n\n      <div v-if=\"pingResult\" class=\"record-types\">\n        <h3 class=\"sub-heading\">Ping Result:</h3>\n        <p><strong>IP:</strong> {{ pingResult.ip }}</p>\n        <p><strong>Requests:</strong> {{ pingResult.requests }}</p>\n        <p><strong>Loss:</strong> {{ pingResult.loss }}%</p>\n        <p><strong>Latency:</strong> {{ pingResult.latency }} ms</p>\n        <p><strong>Min:</strong> {{ pingResult.min }} ms</p>\n        <p><strong>Max:</strong> {{ pingResult.max }} ms</p>\n        <p><strong>Avg:</strong> {{ pingResult.avg }} ms</p>\n        <p><strong>Standard Deviation:</strong> {{ pingResult.stdDev }} ms</p>\n      </div>\n\n      <div v-if=\"error\" class=\"error-message\">{{ error }}</div>\n\n      <h3 class=\"sub-heading mt-8\">Ping Command</h3>\n      <p class=\"description\">\n        Ping is a network utility tool used to test the reachability of a host on an Internet Protocol (IP) network. \n        It sends Internet Control Message Protocol (ICMP) Echo Request messages to the target host and waits for \n        an Echo Reply. The results provide information on the IP address of the host, the number of requests sent, \n        the packet loss percentage, and the round-trip time it takes for the packets to travel to the host and back.\n      </p>\n\n      <h3 class=\"sub-heading mt-8\">Examples</h3>\n      <ul class=\"record-list\">\n        <li>\n          <span class=\"gradient__text\">Example 1:</span>\n          <pre>PING google.com (142.250.190.14): 56 data bytes\n64 bytes from 142.250.190.14: icmp_seq=1 ttl=117 time=14.3 ms</pre>\n        </li>\n        <li>\n          <span class=\"gradient__text\">Example 2:</span>\n          <pre>PING example.com (93.184.216.34): 56 data bytes\n64 bytes from 93.184.216.34: icmp_seq=1 ttl=59 time=15.7 ms</pre>\n        </li>\n        <li>\n          <span class=\"gradient__text\">Example 3:</span>\n          <pre>PING localhost (127.0.0.1): 56 data bytes\n64 bytes from 127.0.0.1: icmp_seq=1 ttl=64 time=0.038 ms</pre>\n        </li>\n        <li>\n          <span class=\"gradient__text\">Example 4:</span>\n          <pre>PING non-existent-domain.com (0.0.0.0): 56 data bytes\nping: non-existent-domain.com: Name or service not known</pre>\n        </li>\n      </ul>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\n\nconst pingUrl = ref('');\nconst loading = ref(false);\nconst pingResult = ref(null);\nconst error = ref(null);\n\nconst sendPing = async () => {\n  loading.value = true;\n  error.value = null;\n  pingResult.value = null;\n\n  try {\n    const response = await fetch('/api/ping', { // Call your local API endpoint\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ url: pingUrl.value }),\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to ping the provided URL.');\n    }\n\n    const data = await response.json();\n    pingResult.value = data.data; // Assuming the data you need is inside `data.data`\n  } catch (err) {\n    error.value = err.message || 'An unexpected error occurred.';\n  } finally {\n    loading.value = false;\n  }\n};\n</script>\n\n<style scoped>\n.wrapper {\n  padding: 2rem;\n  background-color: #0c0a09;\n  color: #ada9a9;\n}\n.margins {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n.sub-heading {\n  font-size: 1.5rem;\n  font-weight: bold;\n  margin-top: 1rem;\n}\n.input-group {\n  display: flex;\n  gap: 0.5rem;\n  margin-bottom: 1rem;\n}\n.input-field {\n  @apply border border-gray-300 rounded p-2 w-full;\n  color: #000;\n  background-color: #f3f0f0;\n}\n.action-button {\n  background-color: #12a87b;\n  color: white;\n  padding: 0.75rem 1.5rem;\n  border-radius: 0.5rem;\n  font-weight: 600;\n  text-transform: uppercase;\n  transition: background-color 0.3s ease;\n}\n\n.action-button:hover {\n  background-color: #0fcf97;\n}\n.record-types {\n  background-color: #1f2937; /* Slightly darker background for visibility */\n  padding: 1rem;\n  border-radius: 0.5rem;\n}\n.loading {\n  margin-top: 1rem;\n}\n.error-message {\n  color: red;\n  margin-top: 1rem;\n}\n.gradient__text {\n  background: linear-gradient(90deg, #7bceb6 10%, #12a87b 40%, #0fcf97 60%, #7bceb6 90%);\n  background-clip: text;\n  -webkit-background-clip: text;\n  background-size: 200% auto;\n  color: #000;\n  -webkit-text-fill-color: transparent;\n  animation: shine 1s linear infinite;\n}\n</style>\n\n"],"version":3}